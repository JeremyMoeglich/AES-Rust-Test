use super::{
    crypt_func::{add_round_key, g_mul},
    key::{shift, sub_bytes as sub_bytes_key, Key},
};

pub fn sub_bytes(key: &mut Key) {
    key.apply_all(sub_bytes_key);
}

pub fn shift_rows(key: &mut Key) {
    key.apply_row(1, shift(-1));
    key.apply_row(2, shift(-2));
    key.apply_row(3, shift(-3));
}

pub fn mix_columns(key: &mut Key) {
    for col_index in 0..key.col_amount() {
        let col = key.get_col(col_index as isize);
        let new_col = [
            g_mul(col[0], 0x02) ^ g_mul(col[1], 0x03) ^ col[2] ^ col[3],
            col[0] ^ g_mul(col[1], 0x02) ^ g_mul(col[2], 0x03) ^ col[3],
            col[0] ^ col[1] ^ g_mul(col[2], 0x02) ^ g_mul(col[3], 0x03),
            g_mul(col[0], 0x03) ^ col[1] ^ col[2] ^ g_mul(col[3], 0x02),
        ];
        key.set_col(col_index, new_col.to_vec());
    }
}

pub fn encrypt_block(block: &Key, round_keys: &[Key]) -> Key {
    let mut block = block.clone();
    add_round_key(&mut block, &round_keys[0]);
    for round_index in 1..round_keys.len() - 1 {
        sub_bytes(&mut block);
        shift_rows(&mut block);
        mix_columns(&mut block);
        add_round_key(&mut block, &round_keys[round_index]);
    }
    sub_bytes(&mut block);
    shift_rows(&mut block);
    add_round_key(&mut block, &round_keys[round_keys.len() - 1]);
    block
}

#[cfg(test)]
mod tests {
    use super::*;

    #[test]
    fn g_mul_test() {
        let x2table: [u8; 256] = [
            0x00, 0x02, 0x04, 0x06, 0x08, 0x0a, 0x0c, 0x0e, 0x10, 0x12, 0x14, 0x16, 0x18, 0x1a,
            0x1c, 0x1e, 0x20, 0x22, 0x24, 0x26, 0x28, 0x2a, 0x2c, 0x2e, 0x30, 0x32, 0x34, 0x36,
            0x38, 0x3a, 0x3c, 0x3e, 0x40, 0x42, 0x44, 0x46, 0x48, 0x4a, 0x4c, 0x4e, 0x50, 0x52,
            0x54, 0x56, 0x58, 0x5a, 0x5c, 0x5e, 0x60, 0x62, 0x64, 0x66, 0x68, 0x6a, 0x6c, 0x6e,
            0x70, 0x72, 0x74, 0x76, 0x78, 0x7a, 0x7c, 0x7e, 0x80, 0x82, 0x84, 0x86, 0x88, 0x8a,
            0x8c, 0x8e, 0x90, 0x92, 0x94, 0x96, 0x98, 0x9a, 0x9c, 0x9e, 0xa0, 0xa2, 0xa4, 0xa6,
            0xa8, 0xaa, 0xac, 0xae, 0xb0, 0xb2, 0xb4, 0xb6, 0xb8, 0xba, 0xbc, 0xbe, 0xc0, 0xc2,
            0xc4, 0xc6, 0xc8, 0xca, 0xcc, 0xce, 0xd0, 0xd2, 0xd4, 0xd6, 0xd8, 0xda, 0xdc, 0xde,
            0xe0, 0xe2, 0xe4, 0xe6, 0xe8, 0xea, 0xec, 0xee, 0xf0, 0xf2, 0xf4, 0xf6, 0xf8, 0xfa,
            0xfc, 0xfe, 0x1b, 0x19, 0x1f, 0x1d, 0x13, 0x11, 0x17, 0x15, 0x0b, 0x09, 0x0f, 0x0d,
            0x03, 0x01, 0x07, 0x05, 0x3b, 0x39, 0x3f, 0x3d, 0x33, 0x31, 0x37, 0x35, 0x2b, 0x29,
            0x2f, 0x2d, 0x23, 0x21, 0x27, 0x25, 0x5b, 0x59, 0x5f, 0x5d, 0x53, 0x51, 0x57, 0x55,
            0x4b, 0x49, 0x4f, 0x4d, 0x43, 0x41, 0x47, 0x45, 0x7b, 0x79, 0x7f, 0x7d, 0x73, 0x71,
            0x77, 0x75, 0x6b, 0x69, 0x6f, 0x6d, 0x63, 0x61, 0x67, 0x65, 0x9b, 0x99, 0x9f, 0x9d,
            0x93, 0x91, 0x97, 0x95, 0x8b, 0x89, 0x8f, 0x8d, 0x83, 0x81, 0x87, 0x85, 0xbb, 0xb9,
            0xbf, 0xbd, 0xb3, 0xb1, 0xb7, 0xb5, 0xab, 0xa9, 0xaf, 0xad, 0xa3, 0xa1, 0xa7, 0xa5,
            0xdb, 0xd9, 0xdf, 0xdd, 0xd3, 0xd1, 0xd7, 0xd5, 0xcb, 0xc9, 0xcf, 0xcd, 0xc3, 0xc1,
            0xc7, 0xc5, 0xfb, 0xf9, 0xff, 0xfd, 0xf3, 0xf1, 0xf7, 0xf5, 0xeb, 0xe9, 0xef, 0xed,
            0xe3, 0xe1, 0xe7, 0xe5,
        ];
        for (i, v) in x2table.iter().enumerate() {
            assert_eq!(g_mul(i as u8, 0x02), *v);
        }
    }

    #[test]
    fn mix_columns_test() {
        let mut key = Key::from_vec(vec![
            [0xd4, 0xbf, 0x5d, 0x30],
            [0xe0, 0xb4, 0x52, 0xae],
            [0xb8, 0x41, 0x11, 0xf1],
            [0x1e, 0x27, 0x98, 0xe5],
        ]);
        mix_columns(&mut key);
        assert_eq!(
            key.key,
            vec![
                [0x04, 0x66, 0x81, 0xe5],
                [0xe0, 0xcb, 0x19, 0x9a],
                [0x48, 0xf8, 0xd3, 0x7a],
                [0x28, 0x06, 0x26, 0x4c]
            ]
        );
    }

    #[test]
    fn mix_columns_test2() {
        let mut key = Key::from_vec(vec![
            [0xdb, 0x13, 0x53, 0x45],
            [0xf2, 0x0a, 0x22, 0x5c],
            [0xd4, 0xd4, 0xd4, 0xd5],
            [0xc6, 0xc6, 0xc6, 0xc6],
        ]);
        mix_columns(&mut key);
        assert_eq!(
            key.key,
            vec![
                [0x8e, 0x4d, 0xa1, 0xbc],
                [0x9f, 0xdc, 0x58, 0x9d],
                [0xd5, 0xd5, 0xd7, 0xd6],
                [0xc6, 0xc6, 0xc6, 0xc6],
            ]
        );
    }
}
